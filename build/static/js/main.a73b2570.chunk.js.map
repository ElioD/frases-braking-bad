{"version":3,"sources":["components/Frase.js","App.js","serviceWorker.js","index.js"],"names":["ContenedorFrase","styled","div","_templateObject","Frase","_ref","frase","react_default","a","createElement","quote","author","Contenedor","App_templateObject","Boton","button","_templateObject2","App","_useState","useState","_useState2","Object","slicedToArray","guardarFrase","consultarAPI","asyncToGenerator","regenerator_default","mark","_callee","api","wrap","_context","prev","next","fetch","sent","json","stop","apply","this","arguments","useEffect","components_Frase","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"62BAGA,IAAMA,EAAkBC,IAAOC,IAAVC,KAuCNC,EARD,SAAAC,GAAe,IAAZC,EAAYD,EAAZC,MAChB,OACCC,EAAAC,EAAAC,cAACT,EAAD,KACCO,EAAAC,EAAAC,cAAA,UAAKH,EAAMI,OADZ,IACwBH,EAAAC,EAAAC,cAAA,SAAIH,EAAMK,gnBCjCpC,IAAMC,EAAaX,IAAOC,IAAVW,KAOVC,EAAQb,IAAOc,OAAVC,KAuCIC,MAtBf,WAAe,IAAAC,EAEkBC,mBAAS,IAF3BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAENZ,EAFMc,EAAA,GAECG,EAFDH,EAAA,GAIRI,EAAY,eAAAnB,EAAAgB,OAAAI,EAAA,EAAAJ,CAAAK,EAAAlB,EAAAmB,KAAG,SAAAC,IAAA,IAAAC,EAAAvB,EAAA,OAAAoB,EAAAlB,EAAAsB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACFC,MAAM,uDADJ,cACdL,EADcE,EAAAI,KAAAJ,EAAAE,KAAA,EAEAJ,EAAIO,OAFJ,OAEd9B,EAFcyB,EAAAI,KAGpBZ,EAAajB,EAAM,IAHC,wBAAAyB,EAAAM,SAAAT,MAAH,yBAAAvB,EAAAiC,MAAAC,KAAAC,YAAA,GAUlB,OAJAC,oBAAU,WACTjB,KACE,IAGFjB,EAAAC,EAAAC,cAACG,EAAD,KACCL,EAAAC,EAAAC,cAACiC,EAAD,CAAOpC,MAAOA,IACdC,EAAAC,EAAAC,cAACK,EAAD,CAAO6B,QAASnB,GAAhB,yBCjCiBoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a73b2570.chunk.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\n\nconst ContenedorFrase = styled.div`\n\tpadding: 3rem;\n\tborder-radius: .5rem;\n\tbackground-color: #fff;\n\tmax-width: 800px;\n\tmargin-top: 10rem;\n\n\th1 {\n\t\tfont-family: Arial, Helvetica, sans-serif;\n\t\ttext-align: center;\n\t\tposition: relative;\n\t\tpadding-left: 4rem;\n\n\t\t&::before {\n\t\t\tcontent: open-quote;\n\t\t\tfont-size: 10rem;\n\t\t\tcolor: black;\n\t\t\tposition: absolute;\n\t\t\tleft: -1rem;\n\t\t\ttop: -2rem;\n\t\t}\n\t}\n\tp {\n\t\tfont-family: Verdana, Geneva, Tahoma, sans-serif;\n\t\tfont-size: 1.4rem;\n\t\ttext-align: right;\n\t\tcolor: #666;\n\t\tmargin-top: 2rem;\n\t}\n`;\n\nconst Frase = ({ frase }) => {\n\treturn (\n\t\t<ContenedorFrase>\n\t\t\t<h1>{frase.quote}</h1> <p>{frase.author}</p>\n\t\t</ContenedorFrase>\n\t);\n};\n\nexport default Frase;\n","import React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport Frase from './components/Frase';\n\nconst Contenedor = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\tpadding-top: 5rem;\n\tflex-direction: column;\n`;\n\nconst Boton = styled.button`\n\tbackground: -webkit-linear-gradient(top left, #007d35 0%, #007d35 40%, #0f574e 100%);\n\tbackground-size: 300px;\n\tfont-family: Arial, Helvetica, sans-serif;\n\tcolor: #fff;\n\tmargin-top: 3rem;\n\tpadding: 1rem 3rem;\n\tfont-size: 2rem;\n\tborder: 2px solid black;\n\ttransition: background-size .8s ease;\n\n\t:hover {\n\t\tcursor: pointer;\n\t\tbackground-size: 400px;\n\t}\n`;\n\nfunction App() {\n\t//State de Frases\n\tconst [ frase, guardarFrase ] = useState({});\n\n\tconst consultarAPI = async () => {\n\t\tconst api = await fetch('https://breaking-bad-quotes.herokuapp.com/v1/quotes');\n\t\tconst frase = await api.json();\n\t\tguardarFrase(frase[0]);\n\t};\n\n\tuseEffect(() => {\n\t\tconsultarAPI();\n\t}, []);\n\n\treturn (\n\t\t<Contenedor>\n\t\t\t<Frase frase={frase} />\n\t\t\t<Boton onClick={consultarAPI}>Obtener Frase</Boton>\n\t\t</Contenedor>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}